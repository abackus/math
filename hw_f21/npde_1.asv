h = 2^(-5);
N = round(2 * pi/h) - 1;
x = 0:h:2 * pi;
f = zeros(length(x),1);
u = zeros(length(x),1); % Represents u at time 1.

for j = 1:length(x)
    if x(j) <= pi 
        f(j) = x(j);
        u(mod(j - 1/h, length(x)) + 1) = x(j);
    else 
        f(j) = 2 * pi - x(j);
        u(mod(j - 1/h, length(x)) + 1) = 2 * pi - x(j);
    end
end

% v = naive_scheme(f, 0.5, 1); % Naive scheme
v = theta_scheme(f, 0.5, 0.5, 1); % Crank-Nicholson

y = v(end,:);

err = h * sum((v - y)^2);

plot(x, u, x, y);
legend({'Analytic solution', 'Numeric solution'});
disp